{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Bridging functional and interactive computation paradigms"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Concurrent games and strategies",
    "Lifting functions to strategies using Scott order",
    "Subcategories of concurrent games (stable domain theory, nondeterministic dataflow, geometry of interaction, dialectica interpretation, lenses and optics, dependent lenses and optics)",
    "Transfer enrichments of strategies to functional cases (probabilistic, quantum, real-number computation)"
  ],
  "results": [
    "None"
  ],
  "paper_id": "621d8ece5aee126c0f73bd97",
  "title": "Making Concurrency Functional",
  "abstract": "  The article bridges between two major paradigms in computation, the functional, at basis computation from input to output, and the interactive, where computation reacts to its environment while underway. Central to any compositional theory of interaction is the dichotomy between a system and its environment. Concurrent games and strategies address the dichotomy in fine detail, very locally, in a distributed fashion, through distinctions between Player moves (events of the system) and Opponent moves (those of the environment). A functional approach has to handle the dichotomy much more ingeniously, through its blunter distinction between input and output. This has led to a variety of functional approaches, specialised to particular interactive demands. Through concurrent games we can more clearly see what separates and connects the differing paradigms, and show how:   * to lift functions to strategies; the \"Scott order\" intrinsic to concurrent games plays a key role in turning functional dependency to causal dependency.   * several paradigms of functional programming and logic arise naturally as subcategories of concurrent games, including stable domain theory; nondeterministic dataflow; geometry of interaction; the dialectica interpretation; lenses and optics; and their extensions to containers in dependent lenses and optics.   * to transfer enrichments of strategies (such as to probabilistic, quantum or real-number computation) to functional cases. "
}