{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Interpreting Knowledge-based Programs"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Must/cannot analysis",
    "Constructive interpretation"
  ],
  "results": [
    "Monotone and least fixed point in constructive interpretation",
    "Application to Java memory model"
  ],
  "paper_id": "63d340ef90e50fcafd9114fc",
  "title": "Interpreting Knowledge-based Programs (Extended Version with Proofs)",
  "abstract": "  Knowledge-based programs specify multi-agent protocols with epistemic guards that abstract from how agents learn and record facts or information about other agents and the environment. Their interpretation involves a non-monotone mutual dependency between the evaluation of epistemic guards over the reachable states and the derivation of the reachable states depending on the evaluation of epistemic guards. We apply the technique of a must/cannot analysis invented for synchronous programming languages to the interpretation problem of knowledge-based programs and demonstrate that the resulting constructive interpretation is monotone and has a least fixed point. We relate our approach with existing interpretation schemes for both synchronous and asynchronous programs. Finally, we describe an implementation of the constructive interpretation and illustrate the procedure by several examples and an application to the Java memory model. "
}