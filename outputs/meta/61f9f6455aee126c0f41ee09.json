{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Defining a two-level calculus for probabilistic programming"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Two-level calculus",
    "Categorical semantics",
    "Alternative resource interpretation of linear logic"
  ],
  "results": [
    "Enables programming with both Markov kernels and linear operators semantics"
  ],
  "paper_id": "61f9f6455aee126c0f41ee09",
  "title": "A Higher-Order Language for Markov Kernels and Linear Operators",
  "abstract": "  Much work has been done to give semantics to probabilistic programming languages. In recent years, most of the semantics used to reason about probabilistic programs fall in two categories: semantics based on Markov kernels and semantics based on linear operators.   Both styles of semantics have found numerous applications in reasoning about probabilistic programs, but they each have their strengths and weaknesses. Though it is believed that there is a connection between them there are no languages that can handle both styles of programming.   In this work we address these questions by defining a two-level calculus and its categorical semantics which makes it possible to program with both kinds of semantics. From the logical side of things we see this language as an alternative resource interpretation of linear logic, where the resource being kept track of is sampling instead of variable use. "
}