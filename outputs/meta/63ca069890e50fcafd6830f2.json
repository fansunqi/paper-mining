{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Vulnerability Propagation in the Maven Ecosystem"
  ],
  "datasets": [
    "3M recent Maven packages"
  ],
  "methods": [
    "Reachability analysis",
    "Dependency resolution",
    "Transitivity and Granularity analysis"
  ],
  "results": [
    "1/3 of packages are identified as vulnerable with all transitive dependencies considered",
    "Less than 1% of packages have a reachable call path to vulnerable code",
    "Limiting dependency tree depth reduces computation time"
  ],
  "paper_id": "63ca069890e50fcafd6830f2",
  "title": "On the Effect of Transitivity and Granularity on Vulnerability\n  Propagation in the Maven Ecosystem",
  "abstract": "  Reusing software libraries is a pillar of modern software engineering. In 2022, the average Java application depends on 40 third-party libraries. Relying on such libraries exposes a project to potential vulnerabilities and may put an application and its users at risk. Unfortunately, research on software ecosystems has shown that the number of projects that are affected by such vulnerabilities is rising. Previous investigations usually reason about dependencies on the dependency level, but we believe that this highly inflates the actual number of affected projects. In this work, we study the effect of transitivity and granularity on vulnerability propagation in the Maven ecosystem. In our research methodology, we gather a large dataset of 3M recent Maven packages. We obtain the full transitive set of dependencies for this dataset, construct whole-program call graphs, and perform reachability analysis. This approach allows us to identify Maven packages that are actually affected by using vulnerable dependencies. Our empirical results show that: (1) about 1/3 of packages in our dataset are identified as vulnerable if and only if all the transitive dependencies are considered. (2) less than 1% of packages have a reachable call path to vulnerable code in their dependencies, which is far lower than that of a naive dependency-based analysis. (3) limiting the depth of the resolved dependency tree might be a useful technique to reduce computation time for expensive fine-grained (vulnerability) analysis. We discuss the implications of our work and provide actionable insights for researchers and practitioners. "
}