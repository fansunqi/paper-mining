{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Distributed program specifications",
    "Contextual semantics"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Lattice of distributed program specifications",
    "Relative execution traces",
    "Information algebras",
    "Isabelle/HOL proof assistant"
  ],
  "results": [
    "None"
  ],
  "paper_id": "634f6ae490e50fcafdcb63eb",
  "title": "Contextuality in distributed systems",
  "abstract": "  We present a lattice of distributed program specifications, whose ordering represents implementability/refinement. Specifications are modelled by families of subsets of relative execution traces, which encode the local orderings of state transitions, rather than their absolute timing according to a global clock. This is to overcome fundamental physical difficulties with synchronisation. The lattice of specifications is assembled and analysed with several established mathematical tools. Sets of nondegenerate cells of a simplicial set are used to model relative traces, presheaves model the parametrisation of these traces by a topological space of variables, and information algebras reveal novel constraints on program correctness. The latter aspect brings the enterprise of program specification under the widening umbrella of contextual semantics introduced by Abramsky et al. In this model of program specifications, contextuality manifests as a failure of a consistency criterion comparable to Lamport's definition of sequential consistency. The theory of information algebras also suggests efficient local computation algorithms for the verification of this criterion. The novel constructions in this paper have been verified in the proof assistant Isabelle/HOL. "
}