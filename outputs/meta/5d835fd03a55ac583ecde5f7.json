{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Deterministic algorithms for Lovasz Local Lemma"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Algorithm for Shearer's LLL criterion",
    "Parallel algorithms for flexible bad-events",
    "Derandomized MT-distribution"
  ],
  "results": [
    "Matches best previous randomized sequential and parallel algorithms",
    "Applications to non-repetitive vertex coloring, independent transversals, strong coloring"
  ],
  "paper_id": "5d835fd03a55ac583ecde5f7",
  "title": "Deterministic algorithms for the Lovasz Local Lemma: simpler, more\n  general, and more parallel",
  "abstract": "  The Lov\\'{a}sz Local Lemma (LLL) is a keystone principle in probability theory, guaranteeing the existence of configurations which avoid a collection $\\mathcal B$ of \"bad\" events which are mostly independent and have low probability. In its simplest \"symmetric\" form, it asserts that whenever a bad-event has probability $p$ and affects at most $d$ bad-events, and $e p d < 1$, then a configuration avoiding all $\\mathcal B$ exists.   A seminal algorithm of Moser & Tardos (2010) gives nearly-automatic randomized algorithms for most constructions based on the LLL. However, deterministic algorithms have lagged behind. We address three specific shortcomings of the prior deterministic algorithms. First, our algorithm applies to the LLL criterion of Shearer (1985); this is more powerful than alternate LLL criteria and also removes a number of nuisance parameters and leads to cleaner and more legible bounds. Second, we provide parallel algorithms with much greater flexibility in the functional form of of the bad-events. Third, we provide a derandomized version of the MT-distribution, that is, the distribution of the variables at the termination of the MT algorithm.   We show applications to non-repetitive vertex coloring, independent transversals, strong coloring, and other problems. These give deterministic algorithms which essentially match the best previous randomized sequential and parallel algorithms. "
}