{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Deletion to hereditary graph classes",
    "Deletion to pairs of graph classes"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "General FPT algorithm",
    "Approximation algorithm",
    "Branching technique",
    "FPT algorithms for deletion to individual graph classes"
  ],
  "results": [
    "Simpler and more efficient FPT algorithms for pairs of graph classes",
    "Covers several pairs of popular graph classes"
  ],
  "paper_id": "61dcf5495244ab9dcb1fb687",
  "title": "Deletion to Scattered Graph Classes II -- Improved FPT Algorithms for\n  Deletion to Pairs of Graph Classes",
  "abstract": "  Let $\\Pi$ be a hereditary graph class. The problem of deletion to $\\Pi$, takes as input a graph $G$ and asks for a minimum number (or a fixed integer $k$) of vertices to be deleted from $G$ so that the resulting graph belongs to $\\Pi$. This is a well-studied problem in paradigms including approximation and parameterized complexity. Recently, the study of a natural extension of the problem was initiated where we are given a finite set of hereditary graph classes, and the goal is to determine whether $k$ vertices can be deleted from a given graph so that the connected components of the resulting graph belong to one of the given hereditary graph classes. The problem is shown to be FPT as long as the deletion problem to each of the given hereditary graph classes is fixed-parameter tractable, and the property of being in any of the graph classes is expressible in the counting monodic second order (CMSO) logic. While this was shown using some black box theorems, faster algorithms were shown when each of the hereditary graph classes has a finite forbidden set. In this paper, we do a deep dive on pairs of specific graph classes ($\\Pi_1, \\Pi_2$) in which we would like the connected components of the resulting graph to belong to, and design simpler and more efficient FPT algorithms. We design a general FPT algorithm and approximation algorithm for pairs of graph classes (possibly having infinite forbidden sets) satisfying certain conditions. These algorithms cover several pairs of popular graph classes. Our algorithm makes non-trivial use of the branching technique and as a black box, FPT algorithms for deletion to individual graph classes. "
}