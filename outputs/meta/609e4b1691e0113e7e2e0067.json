{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Termination checking in concurrent functional languages"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Sized type refinements",
    "Extended semi-axiomatic sequent calculus",
    "Infinitely deep typing derivations",
    "Logical relations argument"
  ],
  "results": [
    "General sized type scheme for concurrent settings",
    "Termination result via novel logical relations argument"
  ],
  "paper_id": "609e4b1691e0113e7e2e0067",
  "title": "Type-Based Termination for Futures",
  "abstract": "  In sequential functional languages, sized types enable termination checking of programs with complex patterns of recursion in the presence of mixed inductive-coinductive types. In this paper, we adapt sized types and their metatheory to the concurrent setting. We extend the semi-axiomatic sequent calculus, a subsuming paradigm for futures-based functional concurrency, and its underlying operational semantics with recursion and arithmetic refinements. The latter enables a new and highly general sized type scheme we call sized type refinements. As a widely applicable technical device, we type recursive programs with infinitely deep typing derivations that unfold all recursive calls. Then, we observe that certain such derivations can be made infinitely wide but finitely deep. The resulting trees serve as the induction target of our termination result, which we develop via a novel logical relations argument. "
}