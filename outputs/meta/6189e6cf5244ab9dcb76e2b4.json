{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Graph rewriting"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Category-theoretic specifications",
    "Imperative algorithms",
    "Finitely-presented C-sets",
    "Categorical constructions (slice categories, structured cospans, distributed graphs)"
  ],
  "results": [
    "Efficient implementation of graph rewriting",
    "Extensible open-source library for categorical constructions",
    "Inherited efficient algorithms for pushout and pullback complements"
  ],
  "paper_id": "6189e6cf5244ab9dcb76e2b4",
  "title": "Computational category-theoretic rewriting",
  "abstract": "  We demonstrate how category theory provides specifications that can efficiently be implemented via imperative algorithms and apply this to the field of graph rewriting. By examples, we show how this paradigm of software development makes it easy to quickly write correct and performant code. We provide a modern implementation of graph rewriting techniques at the level of abstraction of finitely-presented C-sets and clarify the connections between C-sets and the typed graphs supported in existing rewriting software. We emphasize that our open-source library is extensible: by taking new categorical constructions (such as slice categories, structured cospans, and distributed graphs) and relating their limits and colimits to those of their underlying categories, users inherit efficient algorithms for pushout complements and (final) pullback complements. This allows one to perform double-, single-, and sesqui-pushout rewriting over a broad class of data structures. "
}