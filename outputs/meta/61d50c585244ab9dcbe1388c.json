{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Scalable computational chemistry methods"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Tensor Algebra for Many-body Methods (TAMM)",
    "Decoupling computation specification and execution",
    "Modular structure for hardware architecture support"
  ],
  "results": [
    "Ease of use",
    "Performance and productivity gains compared to other implementations"
  ],
  "paper_id": "61d50c585244ab9dcbe1388c",
  "title": "TAMM: Tensor Algebra for Many-body Methods",
  "abstract": "  Tensor contraction operations in computational chemistry consume significant fractions of computing time on large-scale computing platforms. The widespread use of tensor contractions between large multi-dimensional tensors in describing electronic structure theory has motivated the development of multiple tensor algebra frameworks targeting heterogeneous computing platforms. In this paper, we present Tensor Algebra for Many-body Methods (TAMM), a framework for productive and performance-portable development of scalable computational chemistry methods. The TAMM framework decouples the specification of the computation and the execution of these operations on available high-performance computing systems. With this design choice, the scientific application developers (domain scientists) can focus on the algorithmic requirements using the tensor algebra interface provided by TAMM whereas high-performance computing developers can focus on various optimizations on the underlying constructs such as efficient data distribution, optimized scheduling algorithms, efficient use of intra-node resources (e.g., GPUs). The modular structure of TAMM allows it to be extended to support different hardware architectures and incorporate new algorithmic advances. We describe the TAMM framework and our approach to sustainable development of tensor contraction-based methods in computational chemistry applications. We present case studies that highlight the ease of use as well as the performance and productivity gains compared to other implementations. "
}