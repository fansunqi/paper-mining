{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Fluent API design in functional programming languages"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Parametric polymorphism",
    "Type inference",
    "Function overloading"
  ],
  "results": [
    "None"
  ],
  "paper_id": "636482d690e50fcafdcca9a1",
  "title": "Fluent APIs in Functional Languages (full version)",
  "abstract": "  Fluent API is an object-oriented pattern for elegant APIs and embedded DSLs. A smart fluent API can enforce the API protocol or DSL syntax at compile time. As fluent API designs typically rely on function overloading, they are hard to realize in functional programming languages. We show how to write functional fluent APIs using parametric polymorphism and type inference instead of overloading. Our designs support all regular and deterministic context-free API protocols and beyond. "
}