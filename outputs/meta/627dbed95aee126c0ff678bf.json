{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Sparse tensor accelerator modeling"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Sparseloop"
  ],
  "results": [
    "Modeling speed over 2000 times faster than cycle-level simulations",
    "0.1% to 8% average error"
  ],
  "paper_id": "627dbed95aee126c0ff678bf",
  "title": "Sparseloop: An Analytical Approach To Sparse Tensor Accelerator Modeling",
  "abstract": "  In recent years, many accelerators have been proposed to efficiently process sparse tensor algebra applications (e.g., sparse neural networks). However, these proposals are single points in a large and diverse design space. The lack of systematic description and modeling support for these sparse tensor accelerators impedes hardware designers from efficient and effective design space exploration. This paper first presents a unified taxonomy to systematically describe the diverse sparse tensor accelerator design space. Based on the proposed taxonomy, it then introduces Sparseloop, the first fast, accurate, and flexible analytical modeling framework to enable early-stage evaluation and exploration of sparse tensor accelerators. Sparseloop comprehends a large set of architecture specifications, including various dataflows and sparse acceleration features (e.g., elimination of zero-based compute). Using these specifications, Sparseloop evaluates a design's processing speed and energy efficiency while accounting for data movement and compute incurred by the employed dataflow as well as the savings and overhead introduced by the sparse acceleration features using stochastic tensor density models. Across representative accelerators and workloads, Sparseloop achieves over 2000 times faster modeling speed than cycle-level simulations, maintains relative performance trends, and achieves 0.1% to 8% average error. With a case study, we demonstrate Sparseloop's ability to help reveal important insights for designing sparse tensor accelerators (e.g., it is important to co-design orthogonal design aspects). "
}