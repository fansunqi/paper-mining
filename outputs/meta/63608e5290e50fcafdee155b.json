{
  "code_links": [
    "None"
  ],
  "tasks": [
    "State Machine Replication (SMR)",
    "Byzantine Fault Tolerance (BFT)"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "uBFT",
    "Consistent Tail Broadcast",
    "RDMA-based disaggregated memory"
  ],
  "results": [
    "Microsecond-scale latency in data centers",
    "End-to-end latency of as little as 10us",
    "50x faster than MinBFT",
    "Low latency (up to 20us) for applications",
    "Byzantine tolerant with as little as 10us more",
    "Small amount of reliable disaggregated memory (less than 1 MiB)"
  ],
  "paper_id": "63608e5290e50fcafdee155b",
  "title": "uBFT: Microsecond-scale BFT using Disaggregated Memory [Extended\n  Version]",
  "abstract": "  We propose uBFT, the first State Machine Replication (SMR) system to achieve microsecond-scale latency in data centers, while using only $2f{+}1$ replicas to tolerate $f$ Byzantine failures. The Byzantine Fault Tolerance (BFT) provided by uBFT is essential as pure crashes appear to be a mere illusion with real-life systems reportedly failing in many unexpected ways. uBFT relies on a small non-tailored trusted computing base -- disaggregated memory -- and consumes a practically bounded amount of memory. uBFT is based on a novel abstraction called Consistent Tail Broadcast, which we use to prevent equivocation while bounding memory. We implement uBFT using RDMA-based disaggregated memory and obtain an end-to-end latency of as little as 10us. This is at least 50$\\times$ faster than MinBFT , a state of the art $2f{+}1$ BFT SMR based on Intel's SGX. We use uBFT to replicate two KV-stores (Memcached and Redis), as well as a financial order matching engine (Liquibook). These applications have low latency (up to 20us) and become Byzantine tolerant with as little as 10us more. The price for uBFT is a small amount of reliable disaggregated memory (less than 1 MiB), which in our prototype consists of a small number of memory servers connected through RDMA and replicated for fault tolerance. "
}