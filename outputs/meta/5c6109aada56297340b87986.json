{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Simplifying specifications of large scale software and hardware systems"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "State machine maps",
    "Composition of state machine maps",
    "Ordinary discrete mathematics",
    "Primitive recursive functions",
    "Deterministic state machines"
  ],
  "results": [
    "More concise and scalable than traditional automata representations",
    "Detailed specification and verification of Paxos algorithm",
    "Specifications of producer/consumer software, network distributed consensus, real-time digital circuits, and operating system scheduling"
  ],
  "paper_id": "5c6109aada56297340b87986",
  "title": "State machines for large scale computer software and systems",
  "abstract": "  Specifications of complex, large scale, computer software and hardware systems can be radically simplified by using simple maps from input sequences to output values. These \"state machine maps\" provide an alternative representation of classical Moore type state machines. Composition of state machine maps corresponds to state machine products and can be used to specify essentially any type of interconnection as well as parallel and distributed computation. State machine maps can also specify abstract properties of systems and are significantly more concise and scalable than traditional representations of automata. Examples included here include specifications of producer/consumer software, network distributed consensus, real-time digital circuits, and operating system scheduling. The motivation for this work comes from experience designing and developing operating systems and real-time software where weak methods for understanding and exploring designs is a well known handicap. The methods introduced here are based on ordinary discrete mathematics, primitive recursive functions and deterministic state machines and are intended, initially, to aid the intuition and understanding of the system developers. Staying strictly within the boundaries of classical deterministic state machines anchors the methods to the algebraic structures of automata and semigroups, obviates any need for axiomatic deduction systems, \"formal methods\", or extensions to the model, and makes the specifications more faithful to engineering practice. While state machine maps are obvious representations of state machines, the techniques introduced here for defining and composing them are novel. To illustrate applications, the paper includes a fairly detailed specification and verification of the well-known \"Paxos\" distributed consensus algorithm plus a number of simpler examples including a digital PID controller. "
}