{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Dynamically Optimizing Checkpointing for Dependable Distributed Stream Processing"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Khaos",
    "Parallel processing capabilities of virtual cloud automation",
    "Chaos Engineering principles"
  ],
  "results": [
    "Demonstrated usefulness experimentally with Apache Flink"
  ],
  "paper_id": "6136d84a5244ab9dcb6aa8aa",
  "title": "Khaos: Dynamically Optimizing Checkpointing for Dependable Distributed\n  Stream Processing",
  "abstract": "  Distributed Stream Processing systems are becoming an increasingly essential part of Big Data processing platforms as users grow ever more reliant on their ability to provide fast access to new results. As such, making timely decisions based on these results is dependent on a system's ability to tolerate failure. Typically, these systems achieve fault tolerance and the ability to recover automatically from partial failures by implementing checkpoint and rollback recovery. However, owing to the statistical probability of partial failures occurring in these distributed environments and the variability of workloads upon which jobs are expected to operate, static configurations will often not meet Quality of Service constraints with low overhead.   In this paper we present Khaos, a new approach which utilizes the parallel processing capabilities of virtual cloud automation technologies for the automatic runtime optimization of fault tolerance configurations in Distributed Stream Processing jobs. Our approach employs three subsequent phases which borrows from the principles of Chaos Engineering: establish the steady-state processing conditions, conduct experiments to better understand how the system performs under failure, and use this knowledge to continuously minimize Quality of Service violations. We implemented Khaos prototypically together with Apache Flink and demonstrate its usefulness experimentally. "
}