{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Automatic Differentiation in Total Functional Programming Languages"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Combinatory Homomorphic Automatic Differentiation (CHAD)",
    "Categorical Semantics Analysis",
    "Categorical Logical Relations Technique"
  ],
  "results": [
    "Correctness proof of CHAD for expressive type systems",
    "Computes usual mathematical derivative of the function"
  ],
  "paper_id": "615a709d5244ab9dcb3a72cc",
  "title": "CHAD for Expressive Total Languages",
  "abstract": "  We show how to apply forward and reverse mode Combinatory Homomorphic Automatic Differentiation (CHAD) to total functional programming languages with expressive type systems featuring the combination of - tuple types; - sum types; - inductive types; - coinductive types; - function types. We achieve this by analysing the categorical semantics of such types in $\\Sigma$-types (Grothendieck constructions) of suitable categories. Using a novel categorical logical relations technique for such expressive type systems, we give a correctness proof of CHAD in this setting by showing that it computes the usual mathematical derivative of the function that the original program implements. The result is a principled, purely functional and provably correct method for performing forward and reverse mode automatic differentiation (AD) on total functional programming languages with expressive type systems. "
}