{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Denotational semantics of Functional Machine Calculus"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Functional Machine Calculus (FMC)",
    "lambda-calculus generalization",
    "Scott-style domain theoretic semantics",
    "Gandy's proof extension"
  ],
  "results": [
    "Syntax semantically natural",
    "Simple types confer strong normalization",
    "Complete language for Cartesian closed categories"
  ],
  "paper_id": "637ee0ee90e50fcafd0f712e",
  "title": "The Functional Machine Calculus II: Semantics",
  "abstract": "  The Functional Machine Calculus (FMC), recently introduced by the authors, is a generalization of the lambda-calculus which may faithfully encode the effects of higher-order mutable store, I/O and probabilistic/non-deterministic input. Significantly, it remains confluent and can be simply typed in the presence of these effects. In this paper, we explore the denotational semantics of the FMC. We have three main contributions: first, we argue that its syntax -- in which both effects and lambda-calculus are realised using the same syntactic constructs -- is semantically natural, corresponding closely to the structure of a Scott-style domain theoretic semantics. Second, we show that simple types confer strong normalization by extending Gandy's proof for the lambda-calculus, including a small simplification of the technique. Finally, we show that the typed FMC (without considering the specifics of encoded effects), modulo an appropriate equational theory, is a complete language for Cartesian closed categories. "
}