{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Lambda Mu Calculus Extension"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Adding negation as a type constructor",
    "Syntactic constructs for negation introduction and elimination",
    "Aczel's generalisation of parallel reduction",
    "Girard's approach of reducibility candidates"
  ],
  "results": [
    "Subject reduction",
    "Confluent extended reduction",
    "Principal typing property"
  ],
  "paper_id": "614bf07e5244ab9dcbc5d485",
  "title": "Adding Negation to Lambda Mu",
  "abstract": "  We present $\\cal L$, an extension of Parigot's $\\lambda\\mu$-calculus by adding negation as a type constructor, together with syntactic constructs that represent negation introduction and elimination. We will define a notion of reduction that extends $\\lambda\\mu$'s reduction system with two new reduction rules, and show that the system satisfies subject reduction. Using Aczel's generalisation of Tait and Martin-L\\\"of's notion of parallel reduction, we show that this extended reduction is confluent. Although the notion of type assignment has its limitations with respect to representation of proofs in natural deduction with implication and negation, we will show that all propositions that can be shown in there have a witness in $\\cal L$. Using Girard's approach of reducibility candidates, we show that all typeable terms are strongly normalisable, and conclude the paper by showing that type assignment for $\\cal L$ enjoys the principal typing property. "
}