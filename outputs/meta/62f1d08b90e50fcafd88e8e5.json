{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Computability theory using string diagrams",
    "Categorical computability",
    "Computable category theory"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Monoidal categories with program evaluators",
    "Monoidal computers",
    "Single-instruction diagrammatic programming language called Run"
  ],
  "results": [
    "None"
  ],
  "paper_id": "62f1d08b90e50fcafd88e8e5",
  "title": "Programs as Diagrams: From Categorical Computability to Computable\n  Categories",
  "abstract": "  This is a draft of the textbook/monograph that presents computability theory using string diagrams. The introductory chapters have been taught as graduate and undergraduate courses and evolved through 8 years of lecture notes. The later chapters contain new ideas and results about categorical computability and some first steps into computable category theory. The underlying categorical view of computation is based on monoidal categories with program evaluators, called *monoidal computers*. This categorical structure can be viewed as a single-instruction diagrammatic programming language called Run, whose only instruction is called RUN. This version: improved text, moved the final chapter to the next volume. (The final version will continue lots of exercises and workouts, but already this version has severely degraded graphics to meet the size bounds.) "
}