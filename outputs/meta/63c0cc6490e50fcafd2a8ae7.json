{
  "code_links": [
    "None"
  ],
  "tasks": [
    "GPU Load Balancing"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "GPU fine-grained load-balancing abstraction",
    "programmable interface",
    "application-specific, tightly coupled load-balancing techniques"
  ],
  "results": [
    "improve programmers' productivity",
    "improve overall performance characteristics",
    "quick path to experimentation with existing load-balancing techniques",
    "easier management and extension of existing code to future architectures"
  ],
  "paper_id": "63c0cc6490e50fcafd2a8ae7",
  "title": "A Programming Model for GPU Load Balancing",
  "abstract": "  We propose a GPU fine-grained load-balancing abstraction that decouples load balancing from work processing and aims to support both static and dynamic schedules with a programmable interface to implement new load-balancing schedules. Prior to our work, the only way to unleash the GPU's potential on irregular problems has been to workload-balance through application-specific, tightly coupled load-balancing techniques. With our open-source framework for load-balancing, we hope to improve programmers' productivity when developing irregular-parallel algorithms on the GPU, and also improve the overall performance characteristics for such applications by allowing a quick path to experimentation with a variety of existing load-balancing techniques. Consequently, we also hope that by separating the concerns of load-balancing from work processing within our abstraction, managing and extending existing code to future architectures becomes easier. "
}