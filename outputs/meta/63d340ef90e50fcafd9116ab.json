{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Synthesizing Specifications"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "spyro"
  ],
  "results": [
    "None"
  ],
  "paper_id": "63d340ef90e50fcafd9116ab",
  "title": "Synthesizing Specifications",
  "abstract": "  Every program should always be accompanied by a specification that describes important aspects of the code's behavior, but writing good specifications is often harder that writing the code itself. This paper addresses the problem of synthesizing specifications automatically. Our method takes as input (i) a set of function definitions, and (ii) a domain-specific language L in which the extracted properties are to be expressed. It outputs a set of properties--expressed in L--that describe the behavior of functions. Each of the produced property is a best L-property for signature: there is no other L-property for signature that is strictly more precise. Furthermore, the set is exhaustive: no more L-properties can be added to it to make the conjunction more precise.   We implemented our method in a tool, spyro. When given the reference implementation for a variety of SyGuS and Synquid synthesis benchmarks, spyro often synthesized properties that that matched the original specification provided in the synthesis benchmark. "
}