{
  "code_links": [
    "None"
  ],
  "tasks": [
    "SAR Automatic Target Recognition"
  ],
  "datasets": [
    "MSTAR"
  ],
  "methods": [
    "GNN-based model-architecture co-design",
    "GraphSAGE layer operators",
    "attention mechanism",
    "weight pruning",
    "input pruning",
    "Scatter-Gather paradigm"
  ],
  "results": [
    "Comparable accuracy with $1/3258$ computation cost and $1/83$ model size",
    "14.8x/2.5x speedup (latency) compared to state-of-the-art CPU/GPU",
    "62x/39x more energy efficient compared to state-of-the-art CPU/GPU"
  ],
  "paper_id": "63b63fd290e50fcafd8f5bc8",
  "title": "Accurate, Low-latency, Efficient SAR Automatic Target Recognition on\n  FPGA",
  "abstract": "  Synthetic aperture radar (SAR) automatic target recognition (ATR) is the key technique for remote-sensing image recognition. The state-of-the-art convolutional neural networks (CNNs) for SAR ATR suffer from \\emph{high computation cost} and \\emph{large memory footprint}, making them unsuitable to be deployed on resource-limited platforms, such as small/micro satellites. In this paper, we propose a comprehensive GNN-based model-architecture {co-design} on FPGA to address the above issues. \\emph{Model design}: we design a novel graph neural network (GNN) for SAR ATR. The proposed GNN model incorporates GraphSAGE layer operators and attention mechanism, achieving comparable accuracy as the state-of-the-art work with near $1/100$ computation cost. Then, we propose a pruning approach including weight pruning and input pruning. While weight pruning through lasso regression reduces most parameters without accuracy drop, input pruning eliminates most input pixels with negligible accuracy drop. \\emph{Architecture design}: to fully unleash the computation parallelism within the proposed model, we develop a novel unified hardware architecture that can execute various computation kernels (feature aggregation, feature transformation, graph pooling). The proposed hardware design adopts the Scatter-Gather paradigm to efficiently handle the irregular computation {patterns} of various computation kernels. We deploy the proposed design on an embedded FPGA (AMD Xilinx ZCU104) and evaluate the performance using MSTAR dataset. Compared with the state-of-the-art CNNs, the proposed GNN achieves comparable accuracy with $1/3258$ computation cost and $1/83$ model size. Compared with the state-of-the-art CPU/GPU, our FPGA accelerator achieves $14.8\\times$/$2.5\\times$ speedup (latency) and is $62\\times$/$39\\times$ more energy efficient. "
}