{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Correctness verification of algorithms"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Relation algebras",
    "Union-by-rank strategy",
    "Path compression",
    "Path splitting",
    "Path halving",
    "Isabelle/HOL"
  ],
  "results": [
    "Formal proof of correctness"
  ],
  "paper_id": "63d340e890e50fcafd910a03",
  "title": "Relation-Algebraic Verification of Disjoint-Set Forests",
  "abstract": "  This paper studies how to use relation algebras, which are useful for high-level specification and verification, for proving the correctness of lower-level array-based implementations of algorithms. We give a simple relation-algebraic semantics of read and write operations on associative arrays. The array operations seamlessly integrate with assignments in computation models supporting while-programs. As a result, relation algebras can be used for verifying programs with associative arrays. We verify the correctness of an array-based implementation of disjoint-set forests using the union-by-rank strategy and find operations with path compression, path splitting and path halving. All results are formally proved in Isabelle/HOL. This paper is an extended version of [1]. "
}