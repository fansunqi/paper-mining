{
  "code_links": "None",
  "tasks": [
    "Community detection and tracking",
    "Graph clustering"
  ],
  "datasets": [
    "Real-world graphs"
  ],
  "methods": [
    "Contrastive Graph Clustering (CGC)",
    "Multi-level positive and negative sample selection",
    "Incremental learning for time-evolving data"
  ],
  "results": [
    "CGC consistently outperforms existing methods"
  ],
  "paper_id": "625f6bed5aee126c0ffb3146",
  "title": "CGC: Contrastive Graph Clustering for Community Detection and Tracking",
  "abstract": "  Given entities and their interactions in the web data, which may have occurred at different time, how can we find communities of entities and track their evolution? In this paper, we approach this important task from graph clustering perspective. Recently, state-of-the-art clustering performance in various domains has been achieved by deep clustering methods. Especially, deep graph clustering (DGC) methods have successfully extended deep clustering to graph-structured data by learning node representations and cluster assignments in a joint optimization framework. Despite some differences in modeling choices (e.g., encoder architectures), existing DGC methods are mainly based on autoencoders and use the same clustering objective with relatively minor adaptations. Also, while many real-world graphs are dynamic, previous DGC methods considered only static graphs. In this work, we develop CGC, a novel end-to-end framework for graph clustering, which fundamentally differs from existing methods. CGC learns node embeddings and cluster assignments in a contrastive graph learning framework, where positive and negative samples are carefully selected in a multi-level scheme such that they reflect hierarchical community structures and network homophily. Also, we extend CGC for time-evolving data, where temporal graph clustering is performed in an incremental learning fashion, with the ability to detect change points. Extensive evaluation on real-world graphs demonstrates that the proposed CGC consistently outperforms existing methods. "
}