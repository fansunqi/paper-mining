{
  "code_links": "None",
  "tasks": [
    "Quantum computing emulation",
    "Weighted-MaxCut problem"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Hardware-software co-design",
    "Optimized QAOA operations",
    "Pipeline architecture"
  ],
  "results": [
    "Time complexity reduced from O(N^2) to O(N)",
    "Energy efficiency improvements",
    "Resource utilization improvements"
  ],
  "title": "Standalone FPGA-Based QAOA Emulator for Weighted-MaxCut on Embedded Devices.pdf",
  "abstract": "\u2014Quantum computing (QC) emulation is crucial for advancing QC applications, especially given the scalability con- straints of current devices. FPGA-based designs offer an efficient and scalable alternative to traditional large-scale platforms, but most are tightly integrated with high-performance systems, limit- ing their use in mobile and edge environments. This study intro- duces a compact, standalone FPGA-based QC emulator designed for embedded systems, leveraging the Quantum Approximate Optimization Algorithm (QAOA) to solve the Weighted-MaxCut problem. By restructuring QAOA operations for hardware com- patibility, the proposed design reduces time complexity from O(N 2) to O(N), where N = 2n for n qubits. This reduction, coupled with a pipeline architecture, significantly minimizes resource consumption, enabling support for up to 9-qubits on mid-tier FPGAs\u2014three times more than comparable designs. Additionally, the emulator achieved energy savings ranging from 1.53\u00d7 for 2-qubits to up to 852\u00d7 for 9-qubits compared to software-based QAOA implementations on embedded processors. These results highlight the practical scalability and resource efficiency of the proposed design, providing a robust foundation for QC emulation in resource-constrained edge devices. I. INTRODUCTION Over recent decades, quantum computing (QC) has made remarkable strides, leveraging principles of superposition, en- tanglement, and parallelism to surpass classical computing in specific domains. These advancements have garnered signifi- cant attention from both academia [1]\u2013[4] and industry [5], [6], firmly establishing QC as a central focus of modern research. However, current QC devices face substantial scal- ability and error correction challenges, preventing them from reaching the large-scale capacities required for fully practical quantum computers and networks. As a result, there has been considerable research into emulating quantum algorithms on classical computing resources to bridge the gap until fully operational QC systems emerge. QC emulators play a crit- ical role in enabling rapid experimentation and prototyping This work was supported in part by Institute of Information & communi- cations Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No. RS-2023-00277060, Development of open edge AI SoC hardware and software platform), in part by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT) (No. RS-2024-00345668). (Corresponding author: Woojoo Lee) S. Choi, K. Lee, and W. Lee are with the Department of Intelligent Semiconductor Engineering, Chung-Ang University, South Korea. (e-mail: chltmdgus272@cau.ac.kr; since69se@cau.ac.kr; space@cau.ac.kr). J.-J. Lee is with the AI SoC Research Division, Electronics and Telecom- munications Research Institute (ETRI), Korea. (e-mail: ceicarus@etri.re.kr). \u2217Seonghyun Choi and Kyeongwon Lee contributed equally to this work as the first authors. This manuscript is intended for submission to IEEE Transactions on Computers. of quantum circuits, traditionally relying on large, resource- intensive platforms [7]. In contrast, recent QC emulators in- creasingly leverage FPGAs, providing more efficient, scalable, and cost-effective solutions for hardware-accelerated quantum algorithm emulation [8]\u2013[10]. The inherent cost-efficiency, high performance, and reconfigurability of FPGAs make them an appealing choice for QC emulation. Nevertheless, most FPGA-based QC emulators to date are designed as QC accelerators integrated into high-performance computing systems [8], [9], [11], [12] . While such integration is valuable, it falls short of supporting the eventual deployment of QC applications in mobile and edge device environments. Mobile and edge devices typically operate under stringent resource constraints and require applications that can closely interact with diverse surrounding environments and situations. Consequently, a QC emulator that operates within these con- straints on embedded devices, rather than relying on server- level computing power, is essential. In response to this need, we aim to develop a QC emu- lator tailored for embedded devices, designed to maximize efficiency within limited resources. Our research focuses on designing an optimized QC accelerator and implementing a complete standalone system on an FPGA. We have selected the Quantum Approximate Optimization Algorithm (QAOA) as our target algorithm, given its high potential for applications in mobile and edge device environments. QAOA is an effective QC method for finding approximate solutions to combinatorial optimization problems [13]\u2013[16] and is particularly relevant for the MaxCut problem in graph partitioning [17]\u2013[19]. Graph partitioning optimization is essential in numerous embedded system applications, especially in resource-constrained en- vironments where efficient partitioning algorithms are criti- cal [20]\u2013[22]. Our study on an FPGA standalone QAOA em- ulator is expected to serve as a pivotal benchmark, providing critical insights and establishing a foundational framework for the practical deployment and advancement of QC within embedded systems. The primary challenge in developing a QAOA emulator lies in creating an accelerator that supports the maximum number of qubits within constrained resources. Increasing the number of qubits in QC enhances the emulator\u2019s computational power and capacity, emphasizing the need for optimized design techniques. Like other QC algorithms, QAOA repre- sents quantum states and operations as vectors and matrices, which grow exponentially with the number of qubits n. This exponential growth demands substantial resources for storage and processing, posing significant challenges for QC emulation on resource-constrained platforms. To address these arXiv:2502.11316v1 [cs.ET] 16 Feb 2025"
}