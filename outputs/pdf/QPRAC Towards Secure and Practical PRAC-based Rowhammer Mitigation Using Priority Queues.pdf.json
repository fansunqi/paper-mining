{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Rowhammer Mitigation"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Priority Queues",
    "Alert Back-Off Protocol",
    "Opportunistic Mitigation",
    "Proactive Mitigation"
  ],
  "results": [
    "0.8% slowdown for benign workloads",
    "0% slowdown with proactive mitigations",
    "15 bytes of storage per DRAM bank"
  ],
  "title": "QPRAC Towards Secure and Practical PRAC-based Rowhammer Mitigation Using Priority Queues.pdf",
  "abstract": "\u2014JEDEC has introduced the Per Row Activation Counting (PRAC) framework for DDR5 and future DRAMs to enable precise counting of DRAM row activations. PRAC enables a holistic mitigation of Rowhammer attacks even at ultra-low Rowhammer thresholds. PRAC uses an Alert Back-Off (ABO) protocol to request the memory controller to issue Rowhammer mitigation requests. However, recent PRAC implementations are either insecure or impractical. For example, Panopticon, the inspiration for PRAC, is rendered insecure if implemented per JEDEC\u2019s PRAC specification. On the other hand, the recent UPRAC proposal is impractical since it needs oracular knowledge of the \u2018top-N\u2019 activated DRAM rows that require mitigation. This paper provides the first secure, scalable, and practical RowHammer solution using the PRAC framework. The crux of our proposal is the design of a priority-based service queue (PSQ) for mitigations that prioritizes pending mitigations based on ac- tivation counts to avoid the security risks of prior solutions. This provides principled security using the reactive ABO protocol. Furthermore, we co-design our PSQ, with opportunistic miti- gation on Refresh Management (RFM) operations and proactive mitigation during refresh (REF), to limit the performance impact of ABO-based mitigations. QPRAC provides secure and practical RowHammer mitigation that scales to Rowhammer thresholds as low as 71 while incurring a 0.8% slowdown for benign workloads, which further reduces to 0% with proactive mitigations. I. INTRODUCTION Relentless scaling of Dynamic Random Access Memory (DRAM) technology has exposed critical security vulnerabili- ties like Rowhammer (RH). RH exploits inter-cell interference to rapidly activate DRAM rows, causing bit-flips in neigh- boring victim rows [1], [6], [11], [13], [14], [55], [61]. The number of activations needed to induce bit-flips, known as the Rowhammer threshold (TRH), has dropped from 70K [29] to 4.8K [24] and is expected to decrease further with each generation. To counteract RH, the DRAM industry has pro- posed a series of in-DRAM mitigations, with the latest being Per Row Activation Counting (PRAC) [40]. However, the PRAC specification provides minimal implementation details, placing significant responsibility on DRAM manufacturers. This paper introduces a solution to implement PRAC securely and practically in DRAM for ultra-low TRH values (sub-100). Prior in-DRAM RH mitigations implemented by DRAM vendors commercially have repeatedly fallen short in either security or scalability. For example, DDR4 devices use Tar- geted Row Refresh (TRR), which relies on a tracker to identify aggressor rows and refresh neighboring victim rows [16]. However, these trackers can only monitor a limited number \u00a7A large part of this work was performed while Jeonghyun Woo was interning with NVIDIA Research. of rows and are vulnerable to attack patterns like TRRespass, which target a larger number of rows [11]. DDR5 introduced the Refresh Management (RFM) command to mitigate victim rows proactively. This limits the number of activations per bank before an RFM-based mitigation needs to be issued. However, such solutions do not scale to TRH below 100. Even state-of-the-art defenses like PrIDE [19] and MINT [47] require frequent RFMs (e.g., 1 RFM every 10 activations), resulting in nearly 30% activation bandwidth loss at TRH of 250. Consequently, JEDEC, the DRAM standards committee, proposed PRAC for DDR5 DRAM chips (and beyond) [40]. PRAC maintains activation counters for each row in DRAM and allows the DRAM to use the Alert Back-Off (ABO) pro- tocol to request an RFM from the host only when mitigation is needed. The ABO protocol uses the Alert n pin in the DRAM module to notify the memory controller when any row activation exceeds the Back-Off threshold (NBO), which is set lower than the TRH. This prompts the memory controller to issue RFM commands on demand and perform RH mitigation before a row reaches TRH. Although recent work explored this approach for ultra-low TRH (sub-100), they face security concerns or impractical overheads. 1. Lack of Security: Panopticon [2], the inspiration behind PRAC, also uses in-DRAM per-row activation counters and a FIFO-based service queue to track rows exceeding an acti- vation threshold. When the queue is full, the DRAM module uses the ABO protocol to stop activations and request an RFM for RH mitigation, thus freeing up space in the queue. However, Panopticon is insecure under the PRAC specifica- tion. PRAC employs a non-blocking ABO protocol, allowing the memory controller to continue issuing additional activa- tions for up to 180ns. This window permits a row to surpass the mitigation threshold while bypassing the service queue if the queue is already full. Moreover, Panopticon only selects a row for mitigation when the threshold bit (t) in its counter toggles. Thus, the next insertion for a bypassed row occurs only after 2t activations. We show that this leads to unmitigated rows being activated up to 50\u00d7 higher than TRH, compromising security. 2. Impractical Overheads: UPRAC [4] proposes a PRAC implementation without a service queue. This design triggers an Alert when any DRAM row exceeds NBO. Thereafter, it mitigates the top-N activated rows with N subsequent RFMs. While this avoids the security issues of service queues, it incurs impractical performance overheads. During each Alert, a bank must search through activation counters for all rows to identify the top-N rows, which is impractical. For example, arXiv:2501.18861v2 [cs.CR] 7 Feb 2025"
}