{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Automated Assessment of Bug Reproduction Steps"
  ],
  "datasets": [
    "AndroR2"
  ],
  "methods": [
    "LLM (GPT-4)",
    "Graph-based App Execution Model",
    "Dynamic Analysis"
  ],
  "results": [
    "25.2% improvement in S2R annotation quality (F1 score)",
    "71.4% improvement in identifying missing S2Rs (F1 score)"
  ],
  "title": "Combining Language and App UI Analysis for the Automated Assessment of Bug Reproduction Steps.pdf",
  "abstract": "\u2014Bug reports are essential for developers to confirm software problems, investigate their causes, and validate fixes. Unfortunately, reports often miss important information or are written unclearly, which can cause delays, increased issue resolution effort, or even the inability to solve issues. One of the most common components of reports that are problematic is the steps to reproduce the bug(s) (S2Rs), which are essential to replicate the described program failures and reason about fixes. Given the proclivity for deficiencies in reported S2Rs, prior work has proposed techniques that assist reporters in writing or assessing the quality of S2Rs. However, automated understanding of S2Rs is challenging, and requires linking nuanced natural language phrases with specific, semantically related program information. Prior techniques often struggle to form such language \u2194program connections \u2013 due to issues in language variability and limitations of information gleaned from program analyses. To more effectively tackle the problem of S2R quality annotation, we propose a new technique called AstroBR, which leverages the language understanding capabilities of LLMs to identify and extract the S2Rs from bug reports and map them to GUI interactions in a program state model derived via dynamic analysis. We compared AstroBR to a related state-of-the-art approach and we found that AstroBR annotates S2Rs 25.2% better (in terms of F1 score) than the baseline. Additionally, AstroBR suggests more accurate missing S2Rs than the baseline (by 71.4% in terms of F1 score). I. Introduction End-users and developers frequently submit natural language bug descriptions through issue trackers in the form of bug reports. These reports are essential in helping developers reproduce and understand the bugs, which in turn help in fixing them. At the very least, a good bug report should describe the observed behavior (OB) of the app (i.e., the buggy behavior), the expected behavior (EB) of the app (i.e., the correct behavior), and the steps to reproduce the bug (S2Rs) [1, 2]. Among these, the S2Rs are arguably the most important in reproducing the reported bug, an essential step in confirming the presence of the bug. In GUI-based applications, reproducing a bug requires exercising a series of interactions via the Graphical User Interface (GUI), as described by the S2Rs. A developer (or a tool) trying to replicate a bug needs to understand and extract from each S2R description the user action (a click, swipe, etc.) and the GUI component the action is applied to (a button, menu, check box, etc.). This is often challenging, as end-users often use their own language and understanding of the app when de- scribing the S2Rs, which may differ from that of the developers. The first two authors contributed equally to this work. Incorrect or ambiguous S2R descriptions and missing S2Rs hinder developers\u2019 ability to understand the bug and lead to non-reproducible bugs [3], delays in bug fixes [4, 5], unresolved bugs [4], and even reopening bugs due to incorrect fixes [5]. To address the problem of low-quality S2R descriptions in bug reports, previous research focused on generating missing S2Rs [6], providing quality feedback to bug reporters [7], auto- matically reproducing the bug reports [8], or facilitating interac- tive bug reporting [9\u201311]. A common issue shared by several of these approaches is related to difficulties in mapping low-quality S2R sentences to elements of the GUI, stemming from the lim- itations of traditional natural language processing techniques. In this paper, we present AstroBR (languAge underStanding and assessmenT of the steps to ReprOduce in Bug Reports), a novel approach for improving bug reports at reporting time, by providing quality feedback on S2Rs to the reporter. To do this, AstroBR constructs an application execution model comprising the application interactions via dynamic analysis. Then, for each S2R, it identifies the corresponding application interactions via traversal of an app execution model, guided by GPT-4 [12]. During the traversal, it identifies the best path comprising interactions for the first to last S2R of the bug report. Leveraging the interaction path and the mapped interaction information for each S2R, AstroBR can assess the quality of the reported S2R as well as generate the potential steps that are not reported in the bug, but required to reproduce the bug (i.e., missing steps). Unlike previous work, AstroBR uses an LLM (GPT-4) for three different tasks, in three distinct ways. First, it automat- ically extracts S2R sentences in a natural language bug report, framing the task as a text classification problem. For this task, we evaluated three prompt templates, based on three prompting strategies (i.e., zero-shot, few-shot, and chain-of-thought), using a development set of 54 bug reports. Second, it extracts individual user actions and the GUI components interacted with from the S2R sentences, framing the task as a phrase extraction problem. For this task, we evaluated three additional prompt templates, based on the three prompting strategies. Third, it maps the extracted actions and GUI components to elements of an app execution model, framing the task as a guided graph exploration problem. For this task, we evaluated six prompt templates, based on the three prompting strategies. GPT-4 is used to guide the systematic and efficient exploration of the execution model. During this mapping process, AstroBR identifies problems with the S2R sentences (e.g., 1 arXiv:2502.04251v1 [cs.SE] 6 Feb 2025"
}