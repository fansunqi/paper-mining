{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Identifying common programming errors in CS2 courses",
    "Understanding how students evolve over time"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Longitudinal study of student errors",
    "Modified version of an established error framework",
    "Automatic detection of logical errors"
  ],
  "results": [
    "Students start with few syntactical errors but a high number of semantic errors",
    "Syntax and semantic errors almost completely vanish during the course but logical errors remain",
    "Students struggle with learning programming language syntax, but need more time to understand and express concepts"
  ],
  "title": "From Bugs to Breakthroughs Novice Errors in CS2.pdf",
  "abstract": "\u2014Background: Programming is a fundamental skill in computer science and software engineering speci\ufb01cally. Mastering it is a challenge for novices, which is evidenced by numerous errors that students make during programming assignments. Objective: In our study, we want to identify common program- ming errors in CS2 courses and understand how students evolve over time. Method: To this end, we conducted a longitudinal study of errors that students of a CS2 course made in subsequent programming assignments. Speci\ufb01cally, we manually categorized 710 errors based on a modi\ufb01ed version of an established error framework. Result: We could observe a learning curve of students, such that they start out with only few syntactical errors, but with a high number of semantic errors. During the course, the syntax and semantic errors almost completely vanish, but logical errors remain consistently present. Conclusion: Thus, students have only little trouble with learn- ing the programming language, but need more time to understand and express concepts in a programming language. Index Terms\u2014CS2, Java, Computer science education, Novice Programmers. I. INTRODUCTION Programming is a fundamental skill for software devel- opment. It is also a task with which many students strug- gle, as evidenced by the high failure rates in programming courses [1]. For beginners, it is especially challenging to grasp the linguistic nuances of programming languages, while also learning computational thinking [2]. This is one reason why it is particularly dif\ufb01cult for students to create programs without syntactic, semantic, or logical errors [3]\u2013[5]. Syntactic programming errors refer to the basic rules of a programming language, such as incorrectly declaring a vari- able or additional closing parenthesis, while semantic errors go one step further, such as using a variable that has not been declared or incorrectly assigning a \ufb02oating point value to a variable that can only hold natural numbers [3], [6]. Syntactic and many semantic errors can be detected by compiler error messages [3], [7]\u2013[10]. However, some semantic errors, such as using == for comparison of objects instead of the equals method in Java [4], are not detected on compile time, but still depend on the context of the language. Logical errors describe that a program does not behave according to its speci\ufb01cation, but adheres to the syntactic and semantic rules of a programming language. An example would be a program that is supposed to identify prime numbers, but for some reason identi\ufb01es 4 as a prime number. [3], [5] Studies suggest that students still make numerous errors after completing a CS1 course, which even counts for basic syntactic errors [4], [11]\u2013[13]. However, there is only little dedicated research on the speci\ufb01c kinds of errors students make in a CS2 course or how they evolve within one semester. This is a missed opportunity, because it would help educators understand the learning curves of students and how they could help them to overcome the threshold from novice programmer to professional programmer. With our work, we want to seize that opportunity. To shed more light on student\u2019s errors and how they evolve in this particular phase of learning, we replicate a study from McCall and K\u00a8olling [11]. Speci\ufb01cally, we use their error categorization framework as a tool to explore and understand student errors. One advantage of this framework is its modular extensibility, which we exploited by adding categories that contain logical errors. To this end, we analyze student submissions to program- ming assignments during a CS2 course, and run unit tests on them, so that we can automatically detect logical errors, in addition to compiler errors. We found that students start the course with a high number of semantic errors, and, when faced with new concepts, logical errors as well. This changes during the course, such that semantic errors only play a minor role. Thus, students struggle only at \ufb01rst with learning the semantic rules of the new programming language, and quickly adapt, so that they can focus on implementing a concept, less on how a programming language works. We make the following contributions: \u2022 A replication of the study by McCall and K\u00a8olling [11] to describe programming errors in a CS2 course. \u2022 The addition of logical error categories to the framework. \u2022 A longitudinal view to observe the development of stu- dents over the course of a semester. \u2022 A publicly available replication package: https:// github.com/CSEEandT-25-ErrorPaper/CS2-Error- Categorization II. RELATED WORK The framework we based our work on was developed by McCall and K\u00a8olling based on thematic analysis of student"
}