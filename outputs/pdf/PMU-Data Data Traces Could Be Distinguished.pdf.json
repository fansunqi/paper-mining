{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Side-channel attacks",
    "PMU-based attacks",
    "Transient execution attacks"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "PMU-Data attack",
    "Gadgets",
    "Vulnerability analysis",
    "Covert channels"
  ],
  "results": [
    "Identified 40 vulnerable PMU events",
    "Successfully implemented Meltdown, Spectre, and Zombieload attacks",
    "Built a covert channel",
    "Extracted SGX-protected secret data"
  ],
  "title": "PMU-Data Data Traces Could Be Distinguished.pdf",
  "abstract": "\u2014Modern processors widely equip the Performance Monitoring Unit (PMU) to collect various architecture and microarchitecture events. Software developers often utilize the PMU to enhance program\u2019s performance, but the potential side effects that arise from its activation are often disregarded. In this paper, we find that the PMU can be employed to retrieve instruction operands. Based on this discovery, we introduce PMU- Data, a novel category of side-channel attacks aimed at leaking secret by identifying instruction operands with PMU. To achieve the PMU-Data attack, we develop five gadgets to encode the confidential data into distinct data-related traces while maintaining the control-flow unchanged. We then measure all documented PMU events on three physical machines with different processors while those gadgets are performing. We successfully identify two types of vulnerable gadgets caused by DIV and MOV instructions. Additionally, we discover 40 vulnerable PMU events that can be used to carry out the PMU- Data attack. We through real experiments to demonstrate the perniciousness of the PMU-Data attack by implementing three at- tack goals: (1) leaking the kernel data illegally combined with the transient execution vulnerabilities including Meltdown, Spectre, and Zombieload; (2) building a covert-channel to secretly transfer data; (3) extracting the secret data protected by the Trusted Execution Environment (TEE) combined with the Zombieload vulnerability. Index Terms\u2014performance monitoring unit, microarchitecture security, software guard extensions, transient execution attacks I. INTRODUCTION Modern processors are seriously threatened by a set of side- channel attacks, which are mostly caused by the contention of the shared resources such as caches [1], [2], scheduler queue [3], retirement [4], et al. There are generally three steps to achieve side-channel attacks: 1) the attacker prepares the shared resource; 2) the victim leaves secret-related content on the resource; 3) the attacker speculates the secret from the resource. In this paper, we propose a new type of side- channel attack that does not rely on any contention of shared resources. It is caused by the inherent feature of instructions and the Performance Monitoring Unit (PMU) [5]. The PMU is a significant processor module, which provides several counters to track instruction execution by monitoring events (called PMU events) like instruction cycles, memory loads, retired instructions. Besides, existing studies [6] have verified that PMU is capable of monitoring the events triggered \u2217Corresponding author during transient executions (the instructions are performed but the execution results are not submitted because of some special circumstances such as an exception that is induced in out-of-order execution [7], the prediction that is incorrect in speculation execution [8], or a microcode-assist execution that occurs in Microarchitectural Data Sampling (MDS) [9]). Above all, PMU is shared during both transient and non- transient executions, and its value is permanent. Data traces on the PMU primarily reflect the function of the instruction rather than its operands. For instance, with the exclusive-or (XOR) instruction, the PMU captures consistent events since the operands do not introduce any variability in the trace. However, certain instructions exhibit unique behaviors when encountering specific operands. For instance, a division (DIV) instruction that encounters a dividend of zero will trigger an exception, halting the execution of the instruction, which can be captured by the PMU event ARITH.DIVIDER_ACTIVE. This event means how many cycles when the divide unit is busy executing divide or square root operations. Then, we can identify whether the dividend of a DIV instruction is zero with this PMU event. Based on this discovery, we propose the PMU-Data attack, which is a new side-channel attack that leaks the secret data in transient executions from the data traces on PMU. We manually analyze instructions, and propose a novel mechanism to locate PMU side-channel attacks. Different solutions to those challenges are described in this paper. In i7-6700, i7-7700, and i5-7300U Intel processors, we demonstrate that the PMU-Data attack can be utilized to im- plement Meltdown, Spectre, and ZombieLoad attacks. Besides, we evaluate the function of PMU-Data to serve as a covert channel. Specifically, in i7-7700, we successfully leak the SGX-protected secret data. The Intel SGX provides hardware support for Trusted Execution Environment and protects code and data from modification by privileged attackers. When we use PMU-Data to implement Zombieload in order to steal the SGX-protected secret, experiment results show that the throughput of the PMU-Data attack can be up to 76 KB per second with an average error rate of 0.33%. Contributions. \u2022 We discover that PMU can disclose the data traces left by some special instructions while processing different operands. Based on it, we propose PMU-Data attack, arXiv:2502.10722v1 [cs.CR] 15 Feb 2025"
}