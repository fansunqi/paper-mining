{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Quantum Computing"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Quantum Charge-Coupled Device (QCCD) Architecture",
    "Ion Shutting",
    "Parallel Execution",
    "SWAP Operations",
    "Fidelity Analysis"
  ],
  "results": [
    "Parallel execution improves fidelity when movement overhead is low",
    "Optimal QCCD architectures identified for different quantum algorithms",
    "Parallelism crucial for scalability"
  ],
  "title": "Exploring Operation Parallelism Vs. Ion Movement in Ion-Trapped QCCD Architectures.pdf",
  "abstract": "\u2014Ion-trapped Quantum Charge-Coupled Device (QCCD) architectures have emerged as a promising alternative to scale single-trap devices by interconnecting multiple traps through ion shuttling, enabling the execution of parallel oper- ations across different traps. While this parallelism enhances computational throughput, it introduces additional operations, raising the following question: do the benefits of parallelism outweigh the potential loss of fidelity due to increased ion movements? This paper answers this question by exploring the trade-off between the parallelism of operations and fidelity loss due to movement overhead, comparing sequential execution in single- trap devices with parallel execution in QCCD architectures. We first analyze the fidelity impact of both methods, establishing the optimal number of ion movements for the worst-case sce- nario. Next, we evaluate several quantum algorithms on QCCD architectures by exploiting parallelism through ion distribution across multiple traps. This analysis identifies the algorithms that benefit the most from parallel executions, explores the underlying reasons, and determines the optimal balance between movement overhead and fidelity loss for each algorithm. Index Terms\u2014Ion trap, QCDD architectures, Parallel execu- tion of operations, Quantum Computing, Compilation procedure. I. INTRODUCTION The present era is characterized by an ongoing competitive landscape between multiple quantum technologies pursuing the objective of achieving fault-tolerant quantum comput- ing [1]\u2013[6]. Each of these technologies offers distinctive advantages, yet they all face similar limitations, including scalability\u2014a challenge addressed by some through the explo- ration of modularity [7], [8]. This paper focuses on ion trap processors, which have embraced a modular approach known as the Quantum Charge-Coupled Device (QCCD) [9]\u2013[11] , with future expansions already in development [12]. One highlight of QCCD architectures, in addition to their scalability, is their ability to execute parallel operations across different trapping zones. Although parallel execution is feasi- ble in a single trap, it leads to crosstalk, reducing fidelity [13], an issue overcome by the QCCD parallelization approach. Therefore, parallelism could be enhanced in the compilation process by distributing ions that can be operated concurrently in separate traps. However, prior work on compilations has primarily focused on minimizing ion movement to preserve fidelity [14]\u2013[17], and the impact of prioritizing parallel exe- cution over movement reduction remains unexplored. While enhancing parallelism can lead to increased com- putational throughput by allowing concurrent execution of operations and reducing overall execution time, it incorporates additional SWAP and shuttling operations for ion movement, raising the following question: do the benefits of parallelism outweigh the potential loss of fidelity due to the increased move of ions? This paper fills this gap by analyzing the trade-off between parallelism of operations and loss of fidelity due to movement overhead. It is structured as follows: Section II provides an overview of the QCCD technology, highlighting the com- pilation process while considering operation parallelism. In Section III, fully parallelizable random quantum circuits are executed on both a single-trap device (sequential execution) and a QCCD architecture (parallel execution) to compare their performance under worst-case conditions. In the last Section IV, a set of well-known quantum algorithms is evaluated in QCCD and single-trap architectures, determining the optimal number of ion movements when executed in parallel by varying the number of traps and ions per trap. The paper ends with conclusions and an outline of future work. II. COMPILATION IN QCCD ARCHITECTURES The Quantum Charge-Coupled Device (QCCD) architecture presents the advantage of scalability and parallel execution of operations across different traps without introducing crosstalk. QCCD consists of multiple traps connected by a shuttle mech- anism [18], which enables the physical transfer of ions be- tween them. To perform two-qubit gates, involved ions must be located within the same trap, requiring ion movements\u2014such as shuttling and SWAP operations. In particular, ions need to be positioned at the ends of the ion chain using SWAP operations before being shuttled to a different trap. However, these operations are costly and can degrade execution fidelity. It is essential to minimize these movement operations in the compilation process. Current QCCD compilation techniques focus on reducing such operations; however, none of them exploits the potential for parallelism. To do so, some steps of the compilation process should be modified. The initial place- ment of qubits [19], [20]\u2014which assigns virtual qubits (qubits in a quantum circuit) to physical qubits (ions)\u2014is typically designed to place interacting qubits in close proximity (i.e., within the same trap or in adjacent traps). However, when considering parallelism, one should focus not only on the proximity of interacting qubits but also on distributing qubits across different traps to enhance parallelism. The next compilation step involves qubit routing and scheduling [21], which moves ions between traps to execute two-qubit gates. Current strategies mainly aim to minimize arXiv:2502.04181v1 [quant-ph] 6 Feb 2025"
}