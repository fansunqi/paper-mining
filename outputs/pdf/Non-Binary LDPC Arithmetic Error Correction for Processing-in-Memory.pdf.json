{
  "code_links": [
    "https://github.com/NoNameSubmission/NBLDPC_PIM"
  ],
  "tasks": [
    "Processing-in-memory (PIM) error correction"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Non-binary low-density parity-check (NB-LDPC) error correction",
    "Galois field arithmetic"
  ],
  "results": [
    "59.65\u00d7 BER improvement",
    "2.978\u00d7 power efficiency enhancement"
  ],
  "title": "Non-Binary LDPC Arithmetic Error Correction for Processing-in-Memory.pdf",
  "abstract": "Processing-in-memory (PIM) based on emerging devices such as memristors is more vulnerable to noise than traditional memories, due to the physical non-idealities and complex operations in analog domains. To ensure high reliability, efficient error-correcting code (ECC) is highly desired. However, state-of-the-art ECC schemes for PIM suffer drawbacks including dataflow interruptions, low code rates, and limited error correction patterns. In this work, we propose non-binary low-density parity-check (NB-LDPC) error correction running over the Galois field. Such NB-LDPC scheme with a long word length of 1024 bits can correct up to 8-bit errors with a code rate over 88%. Nonbinary GF operations can support both memory mode and PIM mode even with multi-level memory cells. We fabricate a 40nm prototype PIM chip equipped with our proposed NB-LDPC scheme for validation purposes. Experiments show that PIM with NB-LDPC error correction demonstrates up to 59.65\u00d7 bit error rate (BER) improvement over the original PIM without such error correction. The test chip delivers 2.978\u00d7 power efficiency enhancement over prior works. 1 Introduction Processing-in-memory (PIM) technologies have by far reshaped the chip architecture design by enabling highly efficient in-/near- memory computations, especially for accelerating multiply-and- accumulation (MAC) kernels dominant in deep neural networks (DNNs) [34]. A handful of PIM designs have been developed based on different kinds of volatile memories such as static random- access memory (SRAM) [10], dynamic random-access memory (DRAM) [15]. Recently, emerging nonvolatile memories such as memristors have shown great potential in further improving PIM\u2019s computing efficiency, including resistive random-access memory (RRAM) [27, 37], magnetic random-access memory (MRAM) [29, 38] and phase-change memory (PCM) [17]. With PIM technolo- gies, multiply-and-accumulation (MAC) operations can be exe- cuted inside the memory arrays by accumulating voltages [30, 35], charges [18, 31] or currents [14, 29, 32] along bitlines, etc. The over- all computing efficiency is therefore boosted by avoiding repetitive data transfer between memories and external processing circuits. Despite the advantages of PIM, the accumulation along bitlines introduces unavoidable non-idealities regardless of the underlying memory devices. The noise introduced by them is injected prob- abilistically into data stored in the memory cells and the output computing results [8, 12, 33, 36, 37, 40], such as thermal noise and flickering noise. In particular, emerging memories may introduce higher device variations and the resulting hard errors further dete- riorate the bit error rates (BER) for processing in or near memories, which are easy to induce multi-bit errors (Fig. 1(a)). PIM MAC Computing Thermal Noise Common Mode Noise Cell Mismatch PIM Macro Memory Cell Multi-Bit Error Single-Bit Error ADC ADC Error Source PIM Operation Noise a b Single Bit PIM Error Multi Bit PIM Error 1 0 1 1 1 1 2 1 2 + 1 0 1 0 0 1 1 0 2 + syndrom not in LUT code parity not change Challenging Error Detection & Correction Our Solution: NB-LDPC ECC Input Driver Figure 1: (a) Noise degrades PIM computation accuracy. (b) Correction failures caused by limited supported error correc- tion patterns. To address this unavoidable challenge, error-correcting codes (ECC) are the most commonly used method to attenuate noise cor- ruptions, even though hardware-oriented retraining techniques have also been reported to mitigate the reliability problem of PIM towards DNN applications [2, 21, 23, 24, 39]. Integrating ECC with PIM computations requires the ECC to be compatible with PIM\u2019s intrinsic arithmetic operations. Existing methods can be roughly divided into two categories depending on whether the ECC needs to interrupt the PIM\u2019s computational dataflow. On the one hand, ECC that interrupts PIM computational dataflow usually detects errors and corrects the results by recursively reading the memory row by row [4]. On the other hand, existing ECCs without inter- rupting PIM computational dataflow need relatively large look-up tables to enable the decoding and error-correcting process [3, 19]. Furthermore, existing methods are mainly based on short word lengths with relatively low code rates, which incur excessive area and power overheads due to the high parallelism required to sup- port PIM processing. The error correction capability is by far up to 3-bit errors [4]. Due to the limited support of error correction patterns, existing methods also cannot support commonly used PIM design techniques, such as two-column differential weight mapping [28, 29]. In this work, we present a novel non-binary low-density parity- check (NB-LDPC) ECC scheme [6, 7, 22, 25] optimized for PIM designs to address the above challenges while achieving high code rate and energy efficiency. The main contributions of this work can be summarized as follows: \u2022 We formulate a unified error detection and correction flow for PIM which can work in both conventional read/write mode and PIM mode. The proposed NB-LDPC is compatible with PIM MAC operations. \u2022 We develop a novel NB-LDPC long-code-word ECC scheme, which is capable of correcting an arbitrary number of bit er- rors (depending on the iterative loops) without interrupting PIM computing dataflow. arXiv:2502.11487v1 [cs.AR] 17 Feb 2025"
}