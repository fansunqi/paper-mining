{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Automated Driving Software Portability Checking"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Formal Modeling",
    "Safe Set Computation",
    "Bounded Model Checking",
    "Neural Network Verification"
  ],
  "results": [
    "None"
  ],
  "title": "One Stack, Diverse Vehicles Checking Safe Portability of Automated Driving Software.pdf",
  "abstract": "\u2014 Integrating an automated driving software stack into vehicles with variable configuration is challenging, es- pecially due to different hardware characteristics. Further, to provide software updates to a vehicle fleet in the field, the functional safety of every affected configuration has to be ensured. These additional demands for dependability and the increasing hardware diversity in automated driving make rigorous automatic analysis essential. This paper addresses this challenge by using formal portability checking of adaptive cruise controller code for different vehicle configurations. Given a formal specification of the safe behavior, models of target configurations are derived, which capture relevant effects of sensors, actuators and computing platforms. A corresponding safe set is obtained and used to check if the desired behavior is achievable on all targets. In a case study, portability checking of a traditional and a neural network controller are performed automatically within minutes for each vehicle hardware config- uration. The check provides feedback for necessary adaptations of the controllers, thus, allowing rapid integration and testing of software or parameter changes. I. INTRODUCTION An Automated Driving (AD) software stack is typically developed focusing on one Vehicle Hardware Configuration (VHC) initially. In the later stages of development these must be ported to operate across a wide range of hardware including different sensor types, actuators, and computing platforms. Traditionally, this process has been manual, itera- tive and, thus, error prone. Further, an emerging business model in the automotive domain is function-on-demand, where customers initially purchase a vehicle without certain features and later upgrade the functionality as needed. This is often facilitated through over-the-air software updates, which pose additional safety challenges due to the complexity of interacting software and hardware components and the high configurability of modern vehicles. The safety of an AD function can be compromised by the performance of sensors, actuators, and computing devices [1]. Extensive simulation and real-world testing are typically used to ensure safe operation in a wide range of scenarios. While software testing against selected test cases has proven useful to prevent regression and supports debugging during development, it is non-exhaustive by nature. Formal methods may provide guarantees of completeness to a certain level in the context of AD [2], but they are mainly based on abstract models derived manually from the software deployed in the V. Nenchev is with the Department of Electrical and Computer Engi- neering, University of the Bundeswehr Munich, Werner-Heisenberg-Weg 39, 85579 Neubiberg, Germany. He was formerly with the BMW Group, Munich. vladislav.nenchev@unibw.de vehicle. Automatic portability checking methods at code- level become increasingly important for managing hardware diversity and covering the demand for reliable AD systems with a large Operational Design Domain (ODD) including after-sale (e.g. over-the-air) updates and feature releases. In this paper, formal models of the vehicle and its sur- roundings are used to automatically check the portability of Adaptive Cruise Control (ACC) software to different VHCs. The derived models encompass common safety-relevant as- pects of sensors, computing platforms, and actuators in AD. Given the main functional safety requirement of ACC [3] \u2013 to maintain an appropriate safe distance from relevant front objects \u2013 a safe set within the ODD is obtained for each VHC. This allows using the method proposed in [4] to check if the closed-loop execution of the ACC code operates safely for each VHC. A case study demonstrates how the check provides essential feedback for conventionally implemented and Deep Neural Network (DNN)-based ACC software for three different VHCs. The proposed portability check comprehensively covers the entire ODD, but relies on a formal model that may not reflect all behaviors of the real system. Although real-world datasets provide a more accurate representation of behaviors, they may fail to encompass all relevant scenarios within the ODD. Therefore, this approach serves as a complementary method to evaluations based on real-world datasets. It sup- ports rapid integration and testing of software or parameter variations, thus enhancing the efficiency of deploying AD functions across a diverse vehicle fleet. The remainder of the paper is organized as follows. After summarizing related work (Sec. II), preliminaries for ACC are provided (Sec. III). Then, in Sec. IV, models and safe sets for diverse configurations are obtained to enable portability checking. Finally, the portability of two ACC implemen- tations is checked for three VHCs (Sec. V), followed by a discussion and conclusions (Sec. VI). II. RELATED WORK Testing is common practice for checking features and functional safety, and is also often applied to show the portability or compatibility of software (updates). How- ever, software compatibility testing [5] is traditionally non- functional, i.e., it ensures that the software application can be executed on the hardware (possibly including a different operating system, communication network etc.). Functional portability testing checks if the software operates according to specified functional requirements that is traditionally im- plemented as a combination of unit, simulation and manual arXiv:2501.18769v1 [eess.SY] 30 Jan 2025"
}