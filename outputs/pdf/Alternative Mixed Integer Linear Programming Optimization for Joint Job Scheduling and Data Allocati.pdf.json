{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Joint Job Scheduling",
    "Data Allocation"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Mixed Integer Linear Programming (MILP)",
    "Alternative MILP (ALTERMILP)"
  ],
  "results": [
    "Significant reduction in makespan",
    "Outperforms existing heuristic methods"
  ],
  "title": "Alternative Mixed Integer Linear Programming Optimization for Joint Job Scheduling and Data Allocati.pdf",
  "abstract": "Kilicd, Scott Klaskye, Tatiana Korchuganovac, Paul Nilssond, Verena Ingrid Martinez Outschoornf, David K. Parkd, Norbert Podhorszkie, Yihui Rend, Frederic Suterd, Sairam Sri Vatsavaid, Wei Yangg, Shinjae Yood, Tadashi Maenod and Alexei Klimentovd aCarnegie Mellon University, Pittsburgh, PA, USA bYonsei University, Seoul, South Korea cUniversity of Pittsburgh, Pittsburgh, PA, USA dBrookhaven National Laboratory, Upton, NY, USA eOak Ridge National Laboratory, Oak Ridge, TN, USA fUniversity of Massachusetts, Amherst, Amherst, MA, USA gSLAC National Accelerator Laboratory, Menlo Park, CA, USA A R T I C L E I N F O Keywords: Job scheduling Date allocation Mixed integer linear programming Grid computing environments High performance computing A B S T R A C T This paper presents a novel approach to the joint optimization of job scheduling and data allocation in grid computing environments. We formulate this joint optimization problem as a mixed integer quadratically constrained program. To tackle the nonlinearity in the constraint, we alternatively fix a subset of decision variables and optimize the remaining ones via Mixed Integer Linear Programming (MILP). We solve the MILP problem at each iteration via an off-the-shelf MILP solver. Our experimental results show that our method significantly outperforms existing heuristic methods, employing either independent optimization or joint optimization strategies. We have also verified the generalization ability of our method over grid environments with various sizes and its high robustness to the algorithm hyper-parameters. 1. Introduction Grid computing has emerged as a powerful tool for pro- cessing the data-intensive jobs in modern scientific research, such as the particle physics [17], biology [6], astronomy [9], and earth science [34]. Its distributed framework allows for the efficient integration and utilization of diverse resources in the environment, which could be roughly classified into two primary types, the computational resources and storage resources. How to properly coordinate these resources has largely decided the efficiency of the grid computing, e.g., the total processing time (makespan), the system throughput or the resource utilization, and it has been a central focus of the recent research in high-performance computing [44, 23]. The coordination of resources can be further dissected into two critical aspects: job scheduling and data allocation. Job scheduling involves assigning jobs to computational \u2217Corresponding author shengyuf@cs.cmu.edu (S. Feng); jaehyungk@yonsei.ac.kr (J. Kim); yiming@cs.cmu.edu (Y. Yang); boudreau@pitt.edu (J. Boudreau); tchowdhur@bnl.gov (T. Chowdhury); ahoisie@bnl.gov (A. Hoisie); raees.ahmad.khan@cern.ch (R. Khan); okilic@bnl.gov (O.O. Kilic); klasky@ornl.gov (S. Klasky); TAK245@pitt.edu (T. Korchuganova); Paul.Nilsson@cern.ch (P. Nilsson); Verena.Martinez@cern.ch (V.I.M. Outschoorn); dpark1@bnl.gov (D.K. Park); pnorbert@ornl.gov (N. Podhorszki); yren@bnl.gov (Y. Ren); suterf@ornl.gov (F. Suter); ssrivatsa@bnl.gov (S.S. Vatsavai); yangw@slac.stanford.edu (W. Yang); sjyoo@bnl.gov (S. Yoo); tadashi.maeno@cern.ch (T. Maeno); aak@bnl.gov (A. Klimentov) 1Equal contribution 2Work done at Carnegie Mellon University nodes and determining their priority within the queue of each node, a process that is vital for the effective parallel execution of distributed jobs. Each computational node is a basic computing unit in the grid environment, subject to a limited memory. When the assigned jobs exceed its memory, it will put the jobs with the lower priority in its local waiting queue, leading to a running delay. Therefore, job scheduling needs to balance the number of jobs assigned to each compu- tational node in order to efficiently leverage the parallelism of the distributed computing. On the other hand, the running time of each job consists of both the data transmission delay and the execution time. Due to the different availability of each data object for downloading, it is also important to manage the priority for the jobs within the same compu- tational node to let the job be executed first if its required data objects are ready. Conversely, data allocation (or data replication) focuses on selecting appropriate storage nodes to cache data, thereby minimizing data transmission delays when the computational node retrieves input data objects for each job. As the bandwidths between computational nodes and storage nodes differ, the assignment must take into ac- count the required objects of the jobs at each computational node. Both job scheduling and data allocation are recog- nized as NP-hard problems [16, 37], and numerous efficient heuristics have been developed to address these challenges approximately in the last few decades [10, 49, 28, 4, 20]. Although significant progress has been made in optimizing Preprint submitted to Elsevier Page 1 of 11 arXiv:2502.00261v1 [cs.DC] 1 Feb 2025"
}