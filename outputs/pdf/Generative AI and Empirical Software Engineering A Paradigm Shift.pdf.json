{
  "code_links": [
    "None"
  ],
  "tasks": [
    "Generative AI and Empirical Software Engineering"
  ],
  "datasets": [
    "None"
  ],
  "methods": [
    "Generative AI",
    "actor-network theory",
    "mixed-method approaches"
  ],
  "results": [
    "None"
  ],
  "title": "Generative AI and Empirical Software Engineering A Paradigm Shift.pdf",
  "abstract": "\u2014The widespread adoption of generative AI in soft- ware engineering marks a paradigm shift, offering new op- portunities to design and utilize software engineering tools while in\ufb02uencing both developers and the artifacts they create. Traditional empirical methods in software engineering, including quantitative, qualitative, and mixed-method approaches, are well established. However, this paradigm shift introduces novel data types and rede\ufb01nes many concepts in the software engineering process. The roles of developers, users, agents, and researchers increasingly overlap, blurring the distinctions between these social and technical actors within the \ufb01eld. This paper examines how integrating AI into software en- gineering challenges traditional research paradigms. It focuses on the research phenomena that we investigate, the methods and theories that we employ, the data we analyze, and the threats to validity that emerge in this new context. Through this exploration, our goal is to understand how AI adoption disrupts established software development practices that creates new opportunities for empirical software engineering research. Index Terms\u2014Software Engineering, Generative AI, Empirical Methods. I. INTRODUCTION The software engineering academic and industry community is undergoing a signi\ufb01cant transformation due to the rapid development and adoption of generative AI technologies. Many consider generative AI to be the most disruptive in- novation in software engineering since the Internet [1], with the potential to fundamentally change the way software is developed, evolved, and used. Others take a more conservative stance, but still acknowledge that the adoption of generative AI is driving critical and substantive changes in software development practices [2]. These changes include cascading effects on delivery speed, software quality, and the developer experience. Beyond its impact on software engineering practices, gen- erative AI is rede\ufb01ning the roles of developers, users, and researchers. The boundaries between these actors are becom- ing increasingly blurred, opening up opportunities for novel approaches to designing, building, and studying software sys- tems. Consequently, in this paper, we explore how the integra- tion of generative AI into the software development lifecycle reshapes and challenges the empirical methods traditionally employed in software engineering research. Quantitative, qual- itative, and mixed method approaches must now account for new data sources, dynamic work\ufb02ows, and rede\ufb01ned notions of the inputs to and the outputs from the software engineering process. It is not just the empirical methods that are disrupted, but also the nature of the research questions posed are changing. Understanding the implications of technological advances on research is a well-established area of concern in media studies and digital anthropology [3]. For example, Marshall McLuhan [4] famously proposed four laws to analyze the impact of new technologies. Storey et al. [1] describe how these laws can be applied to generative AI in software engineering: \u2022 What does generative AI enhance or amplify? Gener- ative AI ampli\ufb01es various software engineering tasks [5], such as automating the writing of low-level code, which previously required signi\ufb01cant human effort. \u2022 What does the technology make obsolete? Traditional platforms such as Stack Over\ufb02ow are seeing reduced use as generative AI provides instant coding assistance and solutions [6], potentially reducing the reliance on community-driven resources. \u2022 What does the technology retrieve that had been obsolesced earlier? Generative AI reintroduces the use of chat interfaces for technical assistance [7], which were not widely utilized by developers until the advent of conversational AI models. \u2022 What does the technology reverse or \ufb02ip into when pushed to extremes? If reliance on generative AI con- tinues to grow, foundational skills, such as learning programming from \ufb01rst principles, may be neglected or undervalued by new learners who overly depend on AI- generated solutions [8]. These laws provide a framework for understanding how generative AI disrupts traditional work\ufb02ows while creating new opportunities for software engineering research. However, these disruptions also raise fundamental questions about how researchers should adapt their approaches to remain relevant and impactful. The data sources we use in our research are evolving and we must prepare for additional disruptive changes, including new phenomena, research methods, theo- ries, and threats to validity. This paper explores how the adoption of generative AI is reshaping empirical software engineering research. Speci\ufb01-"
}